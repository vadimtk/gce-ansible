{%- set clusteraddr = hostvars[groups['node'][0]]['ansible_facts'][networkinterface]['ipv4']['address'] if inventory_hostname != groups['node'][0] else '' -%}
[mysqld]

datadir={{ mountdir }}/{{ mysqldir }}
user=mysql
socket=/tmp/mysql.sock
log-error=error.log

#  master_info_repository = TABLE
#  relay_log_info_repository = TABLE

#  binlog_checksum = NONE
#  log_slave_updates = ON

#log_bin = binlog
#relay_log=relay
#sync_binlog=0

log_bin = binlog
relay_log=relay
sync_binlog=1000
binlog_format = ROW
binlog_row_image=MINIMAL

server_id = {{ ansible_play_hosts.index(inventory_hostname) + 1 }}

# general
  table_open_cache = 200000
  table_open_cache_instances=64
  back_log=3500
  max_connections=4000

# files
  innodb_file_per_table
  innodb_log_file_size=10G
  innodb_log_files_in_group=2
  innodb_open_files=4000

# buffers
  innodb_buffer_pool_size= {{ bufferpool }}
  innodb_buffer_pool_instances=8
  innodb_log_buffer_size=64M

default_storage_engine=InnoDB

innodb_flush_log_at_trx_commit  = 1
innodb_doublewrite=1
innodb_flush_method             = O_DIRECT
innodb_file_per_table           = 1
innodb_autoinc_lock_mode=2
innodb_io_capacity=2000
innodb_io_capacity_max=4000
innodb_monitor_enable=all


bind_address = 0.0.0.0

wsrep_slave_threads=16

wsrep_node_address="{{ hostvars[inventory_hostname]['ansible_facts'][networkinterface]['ipv4']['address'] }}"
wsrep_cluster_name="{{ cluster_name }}"
wsrep_cluster_address=gcomm://{{ clusteraddr }}

# ansible_play_hosts[0] | map('extract', hostvars, [networkinterface, 'ipv4', 'address'])|list|join(',') if inventory_hostname != ansible_play_hosts[0] else "" 


wsrep_provider="{{ installdir }}/{{ mysqlbin[server] }}/lib/libgalera_smm.so"

#wsrep_provider_options="gcs.fc_limit=16;evs.send_window=4;evs.user_send_window=2;gcache.size=150G;cert.optimistic_pa=NO"
wsrep_provider_options="gcs.fc_limit=16;evs.send_window=4;evs.user_send_window=2;gcache.size=15G;"

wsrep_sst_method=xtrabackup-v2
wsrep_sst_auth="root:"

#SET GLOBAL wsrep_provider_options="cert.optimistic_pa=NO";
#wsrep_certification_rules='OPTIMIZED'

pxc-encrypt-cluster-traffic=OFF

ssl-ca={{ mountdir }}/{{ mysqldir }}/ca.pem
ssl-cert={{ mountdir }}/{{ mysqldir }}/server-cert.pem
ssl-key={{ mountdir }}/{{ mysqldir }}/server-key.pem

[client]
socket=/tmp/mysql.sock
ssl-ca={{ mountdir }}/{{ mysqldir }}/ca.pem
ssl-cert={{ mountdir }}/{{ mysqldir }}/client-cert.pem
ssl-key={{ mountdir }}/{{ mysqldir }}/client-key.pem

