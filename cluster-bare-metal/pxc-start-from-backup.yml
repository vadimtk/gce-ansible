---
- hosts: node
  remote_user: "{{ osuser }}"
  become: yes
  become_user: root
  gather_facts: true
  vars_files:
    - mysql_nodes.yml

  tasks:

    - name: Stop MySQL
      systemd:
        name: mysql-cd
        state: stopped

    - name: Remove datadir
      file:
        path: "{{ mountdir }}/{{ mysqldir }}"
        state: "{{ item }}"
      with_items:
        - absent
      tags: copyfiles

    - name: Copy files
      shell:  msrsync -p 8 "{{ mountdir }}/{{ mysqldir }}-copy-{{ backupdir }}/" "{{ mountdir }}/{{ mysqldir }}"
      tags: copyfiles
#      shell: cp -r "{{ mountdir }}/{{ mysqldir }}-copy" "{{ mountdir }}/{{ mysqldir }}"

    - name: Drop cache
      shell: sync; echo 3 > /proc/sys/vm/drop_caches

    - name: Fix ownership
      file: dest="{{ mountdir }}/{{ mysqldir }}" owner=mysql group=mysql recurse=yes

    - name: Generate global mysql.cnf file
      template:
        src: "mysql-{{ server }}.cnf.j2"
        dest: "{{ installdir }}/my.cnf"

    - name: Bootstrap PXC 1st Node
      lineinfile:
        path: "{{ mountdir }}/{{ mysqldir }}/grastate.dat"
        regexp: '^safe_to_bootstrap'
        line: 'safe_to_bootstrap=1'
      when:
        - inventory_hostname == ansible_play_hosts[0]

    - name: Start PXC 1st Node
      systemd:
        name: mysql-cd
        state: started
      when:
        - inventory_hostname == ansible_play_hosts[0]

    - name: Wait for socket
      wait_for:
        path: /tmp/mysql.sock
        state: present
      when:
        - inventory_hostname == ansible_play_hosts[0]

    - name: Start PXC All Nodes
      systemd:
        name: mysql-cd
        state: started
      when:
        - inventory_hostname != ansible_play_hosts[0]

    - name: Wait for socket
      wait_for:
        path: /tmp/mysql.sock
        state: present
      when:
        - inventory_hostname != ansible_play_hosts[0]


#    - import_tasks: group_replication.yml

# vim: set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
